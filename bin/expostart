#!/usr/bin/env bash

BLANK="expo-template-blank-typescript"
USE_BLANK=false
# add help output
for arg in "$@"; do
  if [[ "$arg" == "-h" || "$arg" == "--help" ]]; then
    echo "Usage: expostart [project_name] [options]"
    echo "Options:"
    echo "  -h, --help       output usage information"
    echo "  -tw, --tailwind  add tailwind library to the template"
    exit 0
  fi

  if [[ "$arg" == "-b" || "$arg" == "--blank" ]]; then
    USE_BLANK=true
  fi
done

if [ "$USE_BLANK" = true ] ; then
  echo "Using blank template"
fi

# exit 0

#DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
DIR="$(pwd)"

echo $DIR

# check if project name is present
if [ -n "$1" ]; then
  echo $1
else
  echo "Error! Please enter project name!" 1>&2
  exit 1
fi

# create expo project with typescript template
# echo yes | npx create-expo-app -t expo-template-blank-typescript@sdk-46 $1
# echo yes | bun create expo --template expo-template-blank-typescript $1
if [ "$USE_BLANK" = true ] ; then
  echo yes | bun create expo $1
else
  echo yes | bun create expo --template expo-template-tabs $1
fi

# go to the project directory
cd "$DIR/$1"


# get scripts directory path
SCRIPTS_DIR="$(dirname -- "${BASH_SOURCE[0]}")/.."

# if not blank
if [ "$USE_BLANK" = true ] ; then
  rm App.js
  cp "$SCRIPTS_DIR/templates/App.tsx" App.tsx
  bunx expo customize tsconfig.json
else
  # remove default navigaiton template
  rm -rf app
  # and copy from template
  cp -r "$SCRIPTS_DIR/templates/app" .
fi

# move sources to the src directory
mkdir src
if [ "$USE_BLANK" = false ] ; then
  mv app src/app
  mv components src/components
  mv constants src/constants
fi

# add dependencies
bun add -D eslint prettier @react-native-community/eslint-config @typescript-eslint/eslint-plugin eslint-config-prettier 

if [ "$USE_BLANK" = false ] ; then
  cp "$SCRIPTS_DIR/templates/prettier.config.js" prettier.config.js
else 
  cp "$SCRIPTS_DIR/templates/prettier.config.cli.js" prettier.config.js
fi

# add eslint config
cat > .eslintrc.js <<EOF
module.exports = {
  extends: ['@react-native-community', "eslint-config-prettier"],
  rules: {
    "react/jsx-uses-react": "off",
    "react/react-in-jsx-scope": "off",
  },
}
EOF

# get scripts directory path
SCRIPTS_DIR="$(dirname -- "${BASH_SOURCE[0]}")/.."

# # patch jsons package.json, tsconfig.json, etc
# node "$SCRIPTS_DIR/patch-json.js" "$DIR/$1"
#
# # add .idea to gitignore
# echo ".idea" >> ".gitignore"
#
# yarn install

# add tailwind function
addTailwind() {
  bun add nativewind
  bun add --dev tailwindcss@3.2.2 prettier-plugin-tailwindcss

  SCRIPTS_DIR="$(dirname -- "${BASH_SOURCE[0]}")/.."
  mkdir -p src/lib/tailwind
  cp "$SCRIPTS_DIR/templates/tailwind.config.js" tailwind.config.js
  cp "$SCRIPTS_DIR/templates/babel.config.js" babel.config.js
  cp "$SCRIPTS_DIR/templates/native-wind.d.ts" ./src/lib/tailwind/native-wind.d.ts



  # cp "$SCRIPTS_DIR/templates/tailwind.lib.ts" src/lib/tailwind/index.ts
  # cp "$SCRIPTS_DIR/templates/tailwindApp.tsx" App.tsx 
}

# check script input arguments and run functions accordingly found
# for arg in "$@"
# do
    # if [[ "$arg" == "-tw" || "$arg" == "--tailwind" ]]; then
        # echo "tailwind found"
        # addTailwind
    # fi
# done

if [ "$USE_BLANK" = false ] ; then
  # add tailwind function
  addTailwind
fi

# run prettier
bun prettier --write .

# add README.md
echo "# $1" >> README.md

# and copy from template
cp -r "$SCRIPTS_DIR/templates/nvim-expo" ./.nvim


# add changes to the git
if [ "$USE_BLANK" = true ] ; then
  git init
fi

git add .
git commit -m 'expostart script updates'
