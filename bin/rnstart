#!/usr/bin/env bash

if [ -n "$1" ]; then
  echo $1
else
  echo "Error! Please enter project name!" 1>&2
  exit 1
fi

echo yes | npx react-native@latest init $1 
# bunx react-native@latest init $1

# Check the exit code of the last command
if [ $? -ne 0 ]; then
  echo "Error: react-native init failed."
  # Add your error-handling code here, such as logging, cleanup, or notifying the user.
  exit 1  # Exit the script with an error code
else
  echo "React Native project initialized successfully."
  # Add any other actions you want to perform on success
fi

cd ./$1

echo "# $1" >> README.md

# get scripts directory path
SCRIPTS_DIR="$(dirname -- "${BASH_SOURCE[0]}")/.."

# and copy from template
cp -r "$SCRIPTS_DIR/templates/nvim" ./.nvim


rm App.tsx

cat > App.tsx <<EOF
import React from 'react';
import {SafeAreaView, StyleSheet, Text} from 'react-native';

const App = () => {
  return (
    <SafeAreaView style={styles.container}>
      <Text>Hello</Text>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {flex: 1, alignSelf: 'center', justifyContent: 'center'},
});

export default App;
EOF

# add src directory
mkdir src

# add Tailwind
addTailwind() {
  yarn add nativewind
  yarn add --dev tailwindcss@3.2.2
  yarn add --dev prettier-plugin-tailwindcss

  SCRIPTS_DIR="$(dirname -- "${BASH_SOURCE[0]}")/.."
  mkdir -p src/lib/tailwind
  cp "$SCRIPTS_DIR/templates/tailwind.config.js" tailwind.config.js
  cp "$SCRIPTS_DIR/templates/babel.config.cli.js" babel.config.js
  cp "$SCRIPTS_DIR/templates/native-wind.d.ts" ./src/lib/tailwind/native-wind.d.ts
}

# run add tailwind
addTailwind

yarn install

cd ios 
pod install
cd ..

# run prettier
yarn prettier --write .

git init
git add .
git commit -m 'react native typescript template init'
